def hufftree(HL, HK):
  N = len(HL) # number of symbols
  Htree = zeros((N*2, 3), uint8)
  next = 1
  for n in range(N):
    if HL[n] > 0:
      # place this symbol correct in Htree
      pos = 0
      for k in range(HL[n]):
        if Htree[pos, 0] == 0 and Htree[pos, 1] == 0:
          # it's a branching point but yet not activated
          Htree[pos, 1] = next 
          Htree[pos, 2] = next + 1
          next += 2
        if HK[n, k]:
          pos = Htree[pos, 2] # goto right branch
        else:
          pos = Htree[pos, 1] # goto left branch 
      Htree[pos, 0] = 1 # now the position is a leaf
      Htree[pos, 1] = n + 1 # and this is the symbol number it represent
    
  return Htree

def hufflen(S):
  HL = zeros_like(S)
  Sc = copy(S.flatten())
  Ip = argwhere(Sc > 0) # index of positive elements
  Sp = Sc[Sc > 0] # the positive elements of S
  N = len(Sp) # number of elements in Sp vector
  Ip = reshape(Ip, (1, N))
  HLp = zeros_like(Sp)
  C = append(Sp, zeros((N-1, 1), uint8)) # count or weights for each "tree"
  Top = array(range(N), uint8) # the "tree" every symbol belongs to
  So = sort(-Sp)
  Si = argsort(-Sp) # Si is indexes for descending symbols
  last = N - 1 # Number of "trees" now
  next = N # next free element in C 
  while last > 0:
    # the two smallest "trees" are put together
    C[next] = C[Si[last]] + C[Si[last - 1]]
    I = argwhere(Top == Si[last])
    HLp[I] += 1 # one extra bit added to elements in "tree"
    Top[I] = next
    I = argwhere(Top == Si[last - 1])
    HLp[I] += 1
    Top[I] = next
    last -= 1
    Si[last] = next
    next += 1
    count = last -1
    while count > -1 and C[Si[count + 1]] >= C[Si[count]]:
      temp = Si[count]
      Si[count] = Si[count + 1]
      Si[count + 1] = temp
      count -= 1
  HL[Ip] = HLp
  return HL

def huffcode(HL, Display=False):
  """ Based on the codeword lengths this function find the Huffman codewords

  HK = huffcode(HL,Display);
  HK = huffcode(HL);
  ------------------------------------------------------------------
  Arguments:
    HL     length (bits) for the codeword for each symbol 
          This is usually found by the hufflen function
    HK     The Huffman codewords, a matrix of ones or zeros
          the code for each symbol is a row in the matrix
          Code for symbol S(i) is: HK(i,1:HL(i))
          ex: HK(i,1:L)=[0,1,1,0,1,0,0,0] and HL(i)=6 ==> 
              Codeword for symbol S(i) = '011010'
    Display==1  ==> Codewords are displayed on screen, Default=0
  ------------------------------------------------------------------
  ----------------------------------------------------------------------
  Copyright (c) 1999.  Karl Skretting.  All rights reserved.
  Hogskolen in Stavanger (Stavanger University), Signal Processing Group
  Mail:  karl.skretting@tn.his.no   Homepage:  http://www.ux.his.no/~karlsk/
  
  HISTORY:
  Ver. 1.0  25.08.98  KS: Function made as part of Signal Compression Project 98
  Ver. 1.1  25.12.98  English version of program
  Ver. 1.1p 26.10.20  Python version of program
  ----------------------------------------------------------------------"""

  N = len(HL)
  L = max(HL)
  HK = zeros((N, L))
  HLi = argsort(HL)
  HLs = sort(HL)
  Code = zeros((L))
  for n, hls in enumerate(HLs):
    if hls > 0:
      HK[HLi[n]] = Code
      k = HLs[n] -1;
      while k > -1:
        Code[k] += 1
        if Code[k] == 2:
          Code[k] = 0
          k -= 1
        else:
          break
  if Display is not False:
    for i, n in enumerate(zip(HK, HL)):
      print(f'Symbol {i:15d} gets code: {n[0][:n[1]]}')
  return HK